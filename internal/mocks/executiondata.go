// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/onflow/flow-emulator/internal (interfaces: ExecutionDataAPIClient)
//
// Generated by this command:
//
//	mockgen -destination=internal/mocks/executiondata.go -package=mocks github.com/onflow/flow-emulator/internal ExecutionDataAPIClient
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	executiondata "github.com/onflow/flow/protobuf/go/flow/executiondata"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockExecutionDataAPIClient is a mock of ExecutionDataAPIClient interface.
type MockExecutionDataAPIClient struct {
	ctrl     *gomock.Controller
	recorder *MockExecutionDataAPIClientMockRecorder
}

// MockExecutionDataAPIClientMockRecorder is the mock recorder for MockExecutionDataAPIClient.
type MockExecutionDataAPIClientMockRecorder struct {
	mock *MockExecutionDataAPIClient
}

// NewMockExecutionDataAPIClient creates a new mock instance.
func NewMockExecutionDataAPIClient(ctrl *gomock.Controller) *MockExecutionDataAPIClient {
	mock := &MockExecutionDataAPIClient{ctrl: ctrl}
	mock.recorder = &MockExecutionDataAPIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExecutionDataAPIClient) EXPECT() *MockExecutionDataAPIClientMockRecorder {
	return m.recorder
}

// GetExecutionDataByBlockID mocks base method.
func (m *MockExecutionDataAPIClient) GetExecutionDataByBlockID(arg0 context.Context, arg1 *executiondata.GetExecutionDataByBlockIDRequest, arg2 ...grpc.CallOption) (*executiondata.GetExecutionDataByBlockIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetExecutionDataByBlockID", varargs...)
	ret0, _ := ret[0].(*executiondata.GetExecutionDataByBlockIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExecutionDataByBlockID indicates an expected call of GetExecutionDataByBlockID.
func (mr *MockExecutionDataAPIClientMockRecorder) GetExecutionDataByBlockID(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecutionDataByBlockID", reflect.TypeOf((*MockExecutionDataAPIClient)(nil).GetExecutionDataByBlockID), varargs...)
}

// GetRegisterValues mocks base method.
func (m *MockExecutionDataAPIClient) GetRegisterValues(arg0 context.Context, arg1 *executiondata.GetRegisterValuesRequest, arg2 ...grpc.CallOption) (*executiondata.GetRegisterValuesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRegisterValues", varargs...)
	ret0, _ := ret[0].(*executiondata.GetRegisterValuesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegisterValues indicates an expected call of GetRegisterValues.
func (mr *MockExecutionDataAPIClientMockRecorder) GetRegisterValues(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegisterValues", reflect.TypeOf((*MockExecutionDataAPIClient)(nil).GetRegisterValues), varargs...)
}

// SubscribeEvents mocks base method.
func (m *MockExecutionDataAPIClient) SubscribeEvents(arg0 context.Context, arg1 *executiondata.SubscribeEventsRequest, arg2 ...grpc.CallOption) (executiondata.ExecutionDataAPI_SubscribeEventsClient, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SubscribeEvents", varargs...)
	ret0, _ := ret[0].(executiondata.ExecutionDataAPI_SubscribeEventsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeEvents indicates an expected call of SubscribeEvents.
func (mr *MockExecutionDataAPIClientMockRecorder) SubscribeEvents(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeEvents", reflect.TypeOf((*MockExecutionDataAPIClient)(nil).SubscribeEvents), varargs...)
}

// SubscribeExecutionData mocks base method.
func (m *MockExecutionDataAPIClient) SubscribeExecutionData(arg0 context.Context, arg1 *executiondata.SubscribeExecutionDataRequest, arg2 ...grpc.CallOption) (executiondata.ExecutionDataAPI_SubscribeExecutionDataClient, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SubscribeExecutionData", varargs...)
	ret0, _ := ret[0].(executiondata.ExecutionDataAPI_SubscribeExecutionDataClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeExecutionData indicates an expected call of SubscribeExecutionData.
func (mr *MockExecutionDataAPIClientMockRecorder) SubscribeExecutionData(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeExecutionData", reflect.TypeOf((*MockExecutionDataAPIClient)(nil).SubscribeExecutionData), varargs...)
}
