// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/onflow/flow-emulator/internal (interfaces: AccessAPIClient)
//
// Generated by this command:
//
//	mockgen -destination=internal/mocks/access.go -package=mocks github.com/onflow/flow-emulator/internal AccessAPIClient
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	access "github.com/onflow/flow/protobuf/go/flow/access"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockAccessAPIClient is a mock of AccessAPIClient interface.
type MockAccessAPIClient struct {
	ctrl     *gomock.Controller
	recorder *MockAccessAPIClientMockRecorder
}

// MockAccessAPIClientMockRecorder is the mock recorder for MockAccessAPIClient.
type MockAccessAPIClientMockRecorder struct {
	mock *MockAccessAPIClient
}

// NewMockAccessAPIClient creates a new mock instance.
func NewMockAccessAPIClient(ctrl *gomock.Controller) *MockAccessAPIClient {
	mock := &MockAccessAPIClient{ctrl: ctrl}
	mock.recorder = &MockAccessAPIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccessAPIClient) EXPECT() *MockAccessAPIClientMockRecorder {
	return m.recorder
}

// ExecuteScriptAtBlockHeight mocks base method.
func (m *MockAccessAPIClient) ExecuteScriptAtBlockHeight(arg0 context.Context, arg1 *access.ExecuteScriptAtBlockHeightRequest, arg2 ...grpc.CallOption) (*access.ExecuteScriptResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteScriptAtBlockHeight", varargs...)
	ret0, _ := ret[0].(*access.ExecuteScriptResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteScriptAtBlockHeight indicates an expected call of ExecuteScriptAtBlockHeight.
func (mr *MockAccessAPIClientMockRecorder) ExecuteScriptAtBlockHeight(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteScriptAtBlockHeight", reflect.TypeOf((*MockAccessAPIClient)(nil).ExecuteScriptAtBlockHeight), varargs...)
}

// ExecuteScriptAtBlockID mocks base method.
func (m *MockAccessAPIClient) ExecuteScriptAtBlockID(arg0 context.Context, arg1 *access.ExecuteScriptAtBlockIDRequest, arg2 ...grpc.CallOption) (*access.ExecuteScriptResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteScriptAtBlockID", varargs...)
	ret0, _ := ret[0].(*access.ExecuteScriptResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteScriptAtBlockID indicates an expected call of ExecuteScriptAtBlockID.
func (mr *MockAccessAPIClientMockRecorder) ExecuteScriptAtBlockID(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteScriptAtBlockID", reflect.TypeOf((*MockAccessAPIClient)(nil).ExecuteScriptAtBlockID), varargs...)
}

// ExecuteScriptAtLatestBlock mocks base method.
func (m *MockAccessAPIClient) ExecuteScriptAtLatestBlock(arg0 context.Context, arg1 *access.ExecuteScriptAtLatestBlockRequest, arg2 ...grpc.CallOption) (*access.ExecuteScriptResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteScriptAtLatestBlock", varargs...)
	ret0, _ := ret[0].(*access.ExecuteScriptResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteScriptAtLatestBlock indicates an expected call of ExecuteScriptAtLatestBlock.
func (mr *MockAccessAPIClientMockRecorder) ExecuteScriptAtLatestBlock(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteScriptAtLatestBlock", reflect.TypeOf((*MockAccessAPIClient)(nil).ExecuteScriptAtLatestBlock), varargs...)
}

// GetAccount mocks base method.
func (m *MockAccessAPIClient) GetAccount(arg0 context.Context, arg1 *access.GetAccountRequest, arg2 ...grpc.CallOption) (*access.GetAccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccount", varargs...)
	ret0, _ := ret[0].(*access.GetAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockAccessAPIClientMockRecorder) GetAccount(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockAccessAPIClient)(nil).GetAccount), varargs...)
}

// GetAccountAtBlockHeight mocks base method.
func (m *MockAccessAPIClient) GetAccountAtBlockHeight(arg0 context.Context, arg1 *access.GetAccountAtBlockHeightRequest, arg2 ...grpc.CallOption) (*access.AccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccountAtBlockHeight", varargs...)
	ret0, _ := ret[0].(*access.AccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountAtBlockHeight indicates an expected call of GetAccountAtBlockHeight.
func (mr *MockAccessAPIClientMockRecorder) GetAccountAtBlockHeight(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountAtBlockHeight", reflect.TypeOf((*MockAccessAPIClient)(nil).GetAccountAtBlockHeight), varargs...)
}

// GetAccountAtLatestBlock mocks base method.
func (m *MockAccessAPIClient) GetAccountAtLatestBlock(arg0 context.Context, arg1 *access.GetAccountAtLatestBlockRequest, arg2 ...grpc.CallOption) (*access.AccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccountAtLatestBlock", varargs...)
	ret0, _ := ret[0].(*access.AccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountAtLatestBlock indicates an expected call of GetAccountAtLatestBlock.
func (mr *MockAccessAPIClientMockRecorder) GetAccountAtLatestBlock(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountAtLatestBlock", reflect.TypeOf((*MockAccessAPIClient)(nil).GetAccountAtLatestBlock), varargs...)
}

// GetBlockByHeight mocks base method.
func (m *MockAccessAPIClient) GetBlockByHeight(arg0 context.Context, arg1 *access.GetBlockByHeightRequest, arg2 ...grpc.CallOption) (*access.BlockResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlockByHeight", varargs...)
	ret0, _ := ret[0].(*access.BlockResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByHeight indicates an expected call of GetBlockByHeight.
func (mr *MockAccessAPIClientMockRecorder) GetBlockByHeight(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByHeight", reflect.TypeOf((*MockAccessAPIClient)(nil).GetBlockByHeight), varargs...)
}

// GetBlockByID mocks base method.
func (m *MockAccessAPIClient) GetBlockByID(arg0 context.Context, arg1 *access.GetBlockByIDRequest, arg2 ...grpc.CallOption) (*access.BlockResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlockByID", varargs...)
	ret0, _ := ret[0].(*access.BlockResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByID indicates an expected call of GetBlockByID.
func (mr *MockAccessAPIClientMockRecorder) GetBlockByID(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByID", reflect.TypeOf((*MockAccessAPIClient)(nil).GetBlockByID), varargs...)
}

// GetBlockHeaderByHeight mocks base method.
func (m *MockAccessAPIClient) GetBlockHeaderByHeight(arg0 context.Context, arg1 *access.GetBlockHeaderByHeightRequest, arg2 ...grpc.CallOption) (*access.BlockHeaderResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlockHeaderByHeight", varargs...)
	ret0, _ := ret[0].(*access.BlockHeaderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockHeaderByHeight indicates an expected call of GetBlockHeaderByHeight.
func (mr *MockAccessAPIClientMockRecorder) GetBlockHeaderByHeight(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockHeaderByHeight", reflect.TypeOf((*MockAccessAPIClient)(nil).GetBlockHeaderByHeight), varargs...)
}

// GetBlockHeaderByID mocks base method.
func (m *MockAccessAPIClient) GetBlockHeaderByID(arg0 context.Context, arg1 *access.GetBlockHeaderByIDRequest, arg2 ...grpc.CallOption) (*access.BlockHeaderResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlockHeaderByID", varargs...)
	ret0, _ := ret[0].(*access.BlockHeaderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockHeaderByID indicates an expected call of GetBlockHeaderByID.
func (mr *MockAccessAPIClientMockRecorder) GetBlockHeaderByID(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockHeaderByID", reflect.TypeOf((*MockAccessAPIClient)(nil).GetBlockHeaderByID), varargs...)
}

// GetCollectionByID mocks base method.
func (m *MockAccessAPIClient) GetCollectionByID(arg0 context.Context, arg1 *access.GetCollectionByIDRequest, arg2 ...grpc.CallOption) (*access.CollectionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCollectionByID", varargs...)
	ret0, _ := ret[0].(*access.CollectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCollectionByID indicates an expected call of GetCollectionByID.
func (mr *MockAccessAPIClientMockRecorder) GetCollectionByID(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollectionByID", reflect.TypeOf((*MockAccessAPIClient)(nil).GetCollectionByID), varargs...)
}

// GetEventsForBlockIDs mocks base method.
func (m *MockAccessAPIClient) GetEventsForBlockIDs(arg0 context.Context, arg1 *access.GetEventsForBlockIDsRequest, arg2 ...grpc.CallOption) (*access.EventsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEventsForBlockIDs", varargs...)
	ret0, _ := ret[0].(*access.EventsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventsForBlockIDs indicates an expected call of GetEventsForBlockIDs.
func (mr *MockAccessAPIClientMockRecorder) GetEventsForBlockIDs(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventsForBlockIDs", reflect.TypeOf((*MockAccessAPIClient)(nil).GetEventsForBlockIDs), varargs...)
}

// GetEventsForHeightRange mocks base method.
func (m *MockAccessAPIClient) GetEventsForHeightRange(arg0 context.Context, arg1 *access.GetEventsForHeightRangeRequest, arg2 ...grpc.CallOption) (*access.EventsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEventsForHeightRange", varargs...)
	ret0, _ := ret[0].(*access.EventsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventsForHeightRange indicates an expected call of GetEventsForHeightRange.
func (mr *MockAccessAPIClientMockRecorder) GetEventsForHeightRange(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventsForHeightRange", reflect.TypeOf((*MockAccessAPIClient)(nil).GetEventsForHeightRange), varargs...)
}

// GetExecutionResultByID mocks base method.
func (m *MockAccessAPIClient) GetExecutionResultByID(arg0 context.Context, arg1 *access.GetExecutionResultByIDRequest, arg2 ...grpc.CallOption) (*access.ExecutionResultByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetExecutionResultByID", varargs...)
	ret0, _ := ret[0].(*access.ExecutionResultByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExecutionResultByID indicates an expected call of GetExecutionResultByID.
func (mr *MockAccessAPIClientMockRecorder) GetExecutionResultByID(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecutionResultByID", reflect.TypeOf((*MockAccessAPIClient)(nil).GetExecutionResultByID), varargs...)
}

// GetExecutionResultForBlockID mocks base method.
func (m *MockAccessAPIClient) GetExecutionResultForBlockID(arg0 context.Context, arg1 *access.GetExecutionResultForBlockIDRequest, arg2 ...grpc.CallOption) (*access.ExecutionResultForBlockIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetExecutionResultForBlockID", varargs...)
	ret0, _ := ret[0].(*access.ExecutionResultForBlockIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExecutionResultForBlockID indicates an expected call of GetExecutionResultForBlockID.
func (mr *MockAccessAPIClientMockRecorder) GetExecutionResultForBlockID(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecutionResultForBlockID", reflect.TypeOf((*MockAccessAPIClient)(nil).GetExecutionResultForBlockID), varargs...)
}

// GetLatestBlock mocks base method.
func (m *MockAccessAPIClient) GetLatestBlock(arg0 context.Context, arg1 *access.GetLatestBlockRequest, arg2 ...grpc.CallOption) (*access.BlockResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLatestBlock", varargs...)
	ret0, _ := ret[0].(*access.BlockResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestBlock indicates an expected call of GetLatestBlock.
func (mr *MockAccessAPIClientMockRecorder) GetLatestBlock(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestBlock", reflect.TypeOf((*MockAccessAPIClient)(nil).GetLatestBlock), varargs...)
}

// GetLatestBlockHeader mocks base method.
func (m *MockAccessAPIClient) GetLatestBlockHeader(arg0 context.Context, arg1 *access.GetLatestBlockHeaderRequest, arg2 ...grpc.CallOption) (*access.BlockHeaderResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLatestBlockHeader", varargs...)
	ret0, _ := ret[0].(*access.BlockHeaderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestBlockHeader indicates an expected call of GetLatestBlockHeader.
func (mr *MockAccessAPIClientMockRecorder) GetLatestBlockHeader(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestBlockHeader", reflect.TypeOf((*MockAccessAPIClient)(nil).GetLatestBlockHeader), varargs...)
}

// GetLatestProtocolStateSnapshot mocks base method.
func (m *MockAccessAPIClient) GetLatestProtocolStateSnapshot(arg0 context.Context, arg1 *access.GetLatestProtocolStateSnapshotRequest, arg2 ...grpc.CallOption) (*access.ProtocolStateSnapshotResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLatestProtocolStateSnapshot", varargs...)
	ret0, _ := ret[0].(*access.ProtocolStateSnapshotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestProtocolStateSnapshot indicates an expected call of GetLatestProtocolStateSnapshot.
func (mr *MockAccessAPIClientMockRecorder) GetLatestProtocolStateSnapshot(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestProtocolStateSnapshot", reflect.TypeOf((*MockAccessAPIClient)(nil).GetLatestProtocolStateSnapshot), varargs...)
}

// GetNetworkParameters mocks base method.
func (m *MockAccessAPIClient) GetNetworkParameters(arg0 context.Context, arg1 *access.GetNetworkParametersRequest, arg2 ...grpc.CallOption) (*access.GetNetworkParametersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNetworkParameters", varargs...)
	ret0, _ := ret[0].(*access.GetNetworkParametersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkParameters indicates an expected call of GetNetworkParameters.
func (mr *MockAccessAPIClientMockRecorder) GetNetworkParameters(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkParameters", reflect.TypeOf((*MockAccessAPIClient)(nil).GetNetworkParameters), varargs...)
}

// GetNodeVersionInfo mocks base method.
func (m *MockAccessAPIClient) GetNodeVersionInfo(arg0 context.Context, arg1 *access.GetNodeVersionInfoRequest, arg2 ...grpc.CallOption) (*access.GetNodeVersionInfoResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNodeVersionInfo", varargs...)
	ret0, _ := ret[0].(*access.GetNodeVersionInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeVersionInfo indicates an expected call of GetNodeVersionInfo.
func (mr *MockAccessAPIClientMockRecorder) GetNodeVersionInfo(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeVersionInfo", reflect.TypeOf((*MockAccessAPIClient)(nil).GetNodeVersionInfo), varargs...)
}

// GetProtocolStateSnapshotByBlockID mocks base method.
func (m *MockAccessAPIClient) GetProtocolStateSnapshotByBlockID(arg0 context.Context, arg1 *access.GetProtocolStateSnapshotByBlockIDRequest, arg2 ...grpc.CallOption) (*access.ProtocolStateSnapshotResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProtocolStateSnapshotByBlockID", varargs...)
	ret0, _ := ret[0].(*access.ProtocolStateSnapshotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProtocolStateSnapshotByBlockID indicates an expected call of GetProtocolStateSnapshotByBlockID.
func (mr *MockAccessAPIClientMockRecorder) GetProtocolStateSnapshotByBlockID(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProtocolStateSnapshotByBlockID", reflect.TypeOf((*MockAccessAPIClient)(nil).GetProtocolStateSnapshotByBlockID), varargs...)
}

// GetProtocolStateSnapshotByHeight mocks base method.
func (m *MockAccessAPIClient) GetProtocolStateSnapshotByHeight(arg0 context.Context, arg1 *access.GetProtocolStateSnapshotByHeightRequest, arg2 ...grpc.CallOption) (*access.ProtocolStateSnapshotResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProtocolStateSnapshotByHeight", varargs...)
	ret0, _ := ret[0].(*access.ProtocolStateSnapshotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProtocolStateSnapshotByHeight indicates an expected call of GetProtocolStateSnapshotByHeight.
func (mr *MockAccessAPIClientMockRecorder) GetProtocolStateSnapshotByHeight(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProtocolStateSnapshotByHeight", reflect.TypeOf((*MockAccessAPIClient)(nil).GetProtocolStateSnapshotByHeight), varargs...)
}

// GetSystemTransaction mocks base method.
func (m *MockAccessAPIClient) GetSystemTransaction(arg0 context.Context, arg1 *access.GetSystemTransactionRequest, arg2 ...grpc.CallOption) (*access.TransactionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSystemTransaction", varargs...)
	ret0, _ := ret[0].(*access.TransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSystemTransaction indicates an expected call of GetSystemTransaction.
func (mr *MockAccessAPIClientMockRecorder) GetSystemTransaction(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSystemTransaction", reflect.TypeOf((*MockAccessAPIClient)(nil).GetSystemTransaction), varargs...)
}

// GetSystemTransactionResult mocks base method.
func (m *MockAccessAPIClient) GetSystemTransactionResult(arg0 context.Context, arg1 *access.GetSystemTransactionResultRequest, arg2 ...grpc.CallOption) (*access.TransactionResultResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSystemTransactionResult", varargs...)
	ret0, _ := ret[0].(*access.TransactionResultResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSystemTransactionResult indicates an expected call of GetSystemTransactionResult.
func (mr *MockAccessAPIClientMockRecorder) GetSystemTransactionResult(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSystemTransactionResult", reflect.TypeOf((*MockAccessAPIClient)(nil).GetSystemTransactionResult), varargs...)
}

// GetTransaction mocks base method.
func (m *MockAccessAPIClient) GetTransaction(arg0 context.Context, arg1 *access.GetTransactionRequest, arg2 ...grpc.CallOption) (*access.TransactionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTransaction", varargs...)
	ret0, _ := ret[0].(*access.TransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransaction indicates an expected call of GetTransaction.
func (mr *MockAccessAPIClientMockRecorder) GetTransaction(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransaction", reflect.TypeOf((*MockAccessAPIClient)(nil).GetTransaction), varargs...)
}

// GetTransactionResult mocks base method.
func (m *MockAccessAPIClient) GetTransactionResult(arg0 context.Context, arg1 *access.GetTransactionRequest, arg2 ...grpc.CallOption) (*access.TransactionResultResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTransactionResult", varargs...)
	ret0, _ := ret[0].(*access.TransactionResultResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionResult indicates an expected call of GetTransactionResult.
func (mr *MockAccessAPIClientMockRecorder) GetTransactionResult(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionResult", reflect.TypeOf((*MockAccessAPIClient)(nil).GetTransactionResult), varargs...)
}

// GetTransactionResultByIndex mocks base method.
func (m *MockAccessAPIClient) GetTransactionResultByIndex(arg0 context.Context, arg1 *access.GetTransactionByIndexRequest, arg2 ...grpc.CallOption) (*access.TransactionResultResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTransactionResultByIndex", varargs...)
	ret0, _ := ret[0].(*access.TransactionResultResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionResultByIndex indicates an expected call of GetTransactionResultByIndex.
func (mr *MockAccessAPIClientMockRecorder) GetTransactionResultByIndex(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionResultByIndex", reflect.TypeOf((*MockAccessAPIClient)(nil).GetTransactionResultByIndex), varargs...)
}

// GetTransactionResultsByBlockID mocks base method.
func (m *MockAccessAPIClient) GetTransactionResultsByBlockID(arg0 context.Context, arg1 *access.GetTransactionsByBlockIDRequest, arg2 ...grpc.CallOption) (*access.TransactionResultsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTransactionResultsByBlockID", varargs...)
	ret0, _ := ret[0].(*access.TransactionResultsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionResultsByBlockID indicates an expected call of GetTransactionResultsByBlockID.
func (mr *MockAccessAPIClientMockRecorder) GetTransactionResultsByBlockID(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionResultsByBlockID", reflect.TypeOf((*MockAccessAPIClient)(nil).GetTransactionResultsByBlockID), varargs...)
}

// GetTransactionsByBlockID mocks base method.
func (m *MockAccessAPIClient) GetTransactionsByBlockID(arg0 context.Context, arg1 *access.GetTransactionsByBlockIDRequest, arg2 ...grpc.CallOption) (*access.TransactionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTransactionsByBlockID", varargs...)
	ret0, _ := ret[0].(*access.TransactionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionsByBlockID indicates an expected call of GetTransactionsByBlockID.
func (mr *MockAccessAPIClientMockRecorder) GetTransactionsByBlockID(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionsByBlockID", reflect.TypeOf((*MockAccessAPIClient)(nil).GetTransactionsByBlockID), varargs...)
}

// Ping mocks base method.
func (m *MockAccessAPIClient) Ping(arg0 context.Context, arg1 *access.PingRequest, arg2 ...grpc.CallOption) (*access.PingResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Ping", varargs...)
	ret0, _ := ret[0].(*access.PingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockAccessAPIClientMockRecorder) Ping(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockAccessAPIClient)(nil).Ping), varargs...)
}

// SendTransaction mocks base method.
func (m *MockAccessAPIClient) SendTransaction(arg0 context.Context, arg1 *access.SendTransactionRequest, arg2 ...grpc.CallOption) (*access.SendTransactionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendTransaction", varargs...)
	ret0, _ := ret[0].(*access.SendTransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendTransaction indicates an expected call of SendTransaction.
func (mr *MockAccessAPIClientMockRecorder) SendTransaction(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTransaction", reflect.TypeOf((*MockAccessAPIClient)(nil).SendTransaction), varargs...)
}
